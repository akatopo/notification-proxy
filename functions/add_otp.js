const Promise = require('bluebird');
const crypto = require('crypto');
const crypto2 = Promise.promisifyAll(require('crypto2'));
const { tryGetDevice } = require('../db/device-store');
const otpStore = require('../db/otp-store');

/**
 * Registers a one time password (OTP) generated by the device for subscribing a user
 * to its notifications. The OTP will remain registered for 10 minutes.
 * The OTP must be signed and is immediately invalided after a successful call.
 * @param {string} deviceId device id
 * @param {string} otp one time password
 * @param {string} signature signature of the OTP
 * @returns {object}
 */
module.exports = async (deviceId, otp, signature /* , context */) =>
  tryGetDevice(deviceId)
    .then(checkHasDevice)
    .then(async (device) => {
      const verified = await crypto2.verifyAsync(otp, device.publicKey, signature);
      if (!verified) {
        throw new Error('Invalid signature ');
      }
      const hash = crypto.createHash('sha256');
      hash.update(otp);
      await otpStore.saveOtp(deviceId, hash.digest('hex'));
      return { data: { success: true, message: 'otp registered' } };
    })
    .catch(() => new Error('Error when looking for device'));

function checkHasDevice(device) {
  if (!device) {
    throw new Error('Device not found');
  }
  return device;
}
